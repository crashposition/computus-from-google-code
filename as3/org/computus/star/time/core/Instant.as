/*		====================================================================================	2009 | John Dalziel  | The Computus Engine  |  http://www.computus.org	All source code licenced under The MIT Licence	====================================================================================  	S.T.A.R. Space Time Actionscript Repository*/package org.computus.star.time.core{		import flash.events.Event;	import flash.events.EventDispatcher;	/**	 * An Instant represents a single point in time. 	 * It contains only a temporal value and has no geographical component.	 * An Instant() can be used on it's own or extended with the addition of specific calendarical rules.	 * Changing the value of an Instant will broadcast a CHANGE event.  	 */	public class Instant extends EventDispatcher	{	// ------------------------------------------	// PROPERTIES				/**		* @private		*/		protected var value:Number		// ms offset from Unix epoch 1/1/1970			// ------------------------------------------	// CONSTRUCTOR				/**		 * Creates a new instance of the Instant() class.		 * 		 * <p>The follow parameters are accepted by the constructor:</p>	 	 * <table class=innertable>  		 * <tr><th>Instant()</th><th> sets time to the current date and time.</th></tr>		 * <tr><th>Instant( ms:Number )</th><th> sets time to the value passed in the constructor.</th></tr>		 * <tr><th>Instant( d:Date )</th><th> sets time to the value of the AS3 Date passed in the constructor.</th></tr>		 * <tr><th>Instant( d:Instant )</th><th> sets time to the value of the Instant passed in the constructor.</th></tr>		 * </table>		 */		public function Instant( ... args ):void		{			// determine how many arguments have been passed into the constructor			var len:int = args.length						// constuct based on params and datatypes			if ( len == 0 )			{				// Instant() defaults to current time and date				value = new Date().time			}			else			{				if ( args[0] is Number )				{					// Instant( ms:Number )					value = new Date( args[0] ).time				}				else if ( args[0] is String )				{					// Instant( s:String )					value = parse( args[0] )				}				else if ( args[0] is Date )				{					// Instant( d:Date )					value = args[0].time				}				else if ( args[0] is Instant )				{					// Instant( d:Instant )					value = args[0].time				}				else				{					throw ( new Error("unrecognised parameter in Instant") )				}			}		}				/**		 * Removes all listeners and prepares the class for disposal.		 */		public function destroy():void		{		}			// ------------------------------------------	// NOW		/**		 * Static function to retreive the current time.	 	 *	  	 * @return the current time in millieconds.		 */		public static function now():Number			{ return new Date().time }			// ------------------------------------------	// OVERRIDDEN FUNCTIONS	// AS3 docs recommend implementing rather than overriding toString() but FlexBuilder considers it an error.				/**		 * Function to obtain a string representation of the Instant.		 * This function is polymorphic with the AS3 Date class.  	 	 *	  	 * @return the value as a string.		 */		override public function toString():String	{ return value.toString() }		/**		 * Function to obtain the core value of the Instant.		 * This function is polymorphic with the AS3 Date class.  	 	 *	  	 * @return the value in millieconds.		 */		public function valueOf():Number			{ return value }		// ------------------------------------------	// PARSE			/**		 * Static function to parse a date string into a number.		 *		 * @param dateString a validly formatted date string. 		 *  		 * @return the value as a number in millieconds.		 */		public static function parse( dateString:String ):Number	{ return Number( dateString ) }	// ------------------------------------------	// CORE VALUE: these properties and functions are polymorphic with the AS3 Date class 			/**		 * The total number of millieconds before or after the standard epoch (1.1.1970).		 * This property is polymorphic with the AS3 Date class.  		 * Changing the value of time will broadcast a <code>Event.CHANGE</code> event.		 * 		 * @eventType throws an Event.CHANGE event.		 * 		 * @see flash.events.Event		 */		public function get time():Number 					{			 return value 		}				/**		* @private		*/		public function set time( t:Number ):void		{			if ( value != t )			{				value = t				dispatchEvent( new Event( Event.CHANGE ) )			} 		}			}}