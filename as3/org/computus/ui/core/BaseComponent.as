/*		====================================================================================	2009 | John Dalziel  | The Computus Engine  |  http://www.computus.org	All source code licenced under The MIT Licence	====================================================================================  		Base component class	- implements "Garbage Management" through standardised and automated init() and destroy() functions	- implements "deferred rendering" through invalidate() and draw()		init() 	This function is automatically called when the component is added to the stage 	either by placing it on the timeline or by addChild() in AS3.	destroy()	This function is automatically called when the component is removed from the stage	either by removing it from the timeline or by removeChild() in AS3.		invalidate()	This function can be used to queue a draw() request at the next available frame.		draw()	This function can be used to redraw the state of a complicated component. It can either be	called directly or buffered and scheduled by calling the invalidate() command.*/package org.computus.ui.core{	import flash.events.Event;	import flash.display.MovieClip;	public class BaseComponent extends MovieClip	{	// ------------------------------------------	// PROPERTIES	// ------------------------------------------	// CONSTRUCTOR		public function BaseComponent():void		{			super()						// n.b. These events require a minimum Flash Player version of 9.0.28.0			addEventListener( Event.ADDED_TO_STAGE, onAddedToStage, false, 0, true )			addEventListener( Event.REMOVED_FROM_STAGE, onRemovedFromStage, false, 0, true )		}			// ------------------------------------------	// MEMORY MANAGEMENT		// concrete classes should override this function		public function init():void		{			// Warning is raised if subclass doesn't not override init()			throw new Error( "WARNING: " + this + " did not override init()" )					// initialise component here.						// 1. manage any child components			// 2. add any event listeners			// 3. initialise any intervals			// 4. initialise any Timers						// 5. draw() state if neccessary		}				// concrete classes should override this function		public function destroy():void		{			// Warning is raised if subclass doesn't not override destroy()			throw new Error( "WARNING: " + this + " did not override destroy()" )			// suspend component here.						// 1. manage any child components						// 2. remove all listeners							// 3. stop all sounds			// 4. release all references to cameras and microphones.			// 5. call clearInterval() on any currently running intervals			// 6. call stop() on any running Timer objects									// 7. Close any connected network objects, such as instances of:			//		Loader, URLLoader, Socket, XMLSocket, LocalConnection, NetConnections, and NetStream.		}			// ------------------------------------------	// EVENTS		// dispatchEvent() optimisation by Grant Skinner		// http://www.gskinner.com/blog/archives/2009/12/making_dispatch.html		override public function dispatchEvent( e:Event ):Boolean 		{			if ( hasEventListener( e.type ) || e.bubbles ) { return super.dispatchEvent(e) }			return true		}			private function onAddedToStage( e:Event ):void				{			// call component init() function			init() 		}				private function onRemovedFromStage( e:Event ):void			{			// stop the component timeline playhead			stop()			// remove listeners			removeEventListener(Event.ENTER_FRAME, onInvalidate)			removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage)			removeEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage)						// call component destroy() function			destroy() 		}		private function onInvalidate( e:Event ):void		{			removeEventListener(Event.ENTER_FRAME, onInvalidate);			draw();		}			// ------------------------------------------	// DRAW		protected function invalidate():void		{			addEventListener(Event.ENTER_FRAME, onInvalidate, false, 0, true);		}				// concrete classes should override this function		public function draw():void		{			// redraw component state here		}	}}